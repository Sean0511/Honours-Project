status = 0
    forward_duration = 1.0
    backward_duration = 1.5
    right_duration =2.0
    currenttime = 0.0
    start = 0.0
    try:
        pub_thread.wait_for_subscribers()
        pub_thread.update(x, y, z, th, speed, turn)
        start = int(time.time()) #get the current starting time
        print(msg)
        print(vels(speed,turn))
        while(1):
            #key = getKey(settings, key_timeout)
            currenttime = int(time.time()) #get the current time
            #IN minutes
            elapsedtime = (currenttime - start)//60
            elapsedtime_s = (currenttime - start) % 60
            print(elapsedtime)
	    #Move forward for 1 min
            if elapsedtime < forward_duration:
                key = 'w'
            elif (elapsedtime-0.5) >= backward_duration:
		key = 'd'
            elif elapsedtime >= right_duration:
		key = 'w'

            if key in moveBindings.keys():
                x = moveBindings[key][0]
                y = moveBindings[key][1]
                z = moveBindings[key][2]
                th = moveBindings[key][3]
            elif key in speedBindings.keys():
                speed = min(speed_limit, speed * speedBindings[key][0])
                turn = min(turn_limit, turn * speedBindings[key][1])
                if speed == speed_limit:
                    print("Linear speed limit reached!")
                if turn == turn_limit:
                    print("Angular speed limit reached!")
                print(vels(speed,turn))
                if (status == 14):
                    print(msg)
                status = (status + 1) % 15
            else:
                # Skip updating cmd_vel if key timeout and robot already
                # stopped.
                if key == '' and x == 0 and y == 0 and z == 0 and th == 0:
                    continue
                x = 0
                y = 0
                z = 0
                th = 0
               
                if (key == '\x03'):
                    break

            pub_thread.update(x, y, z, th, speed, turn)

    except Exception as e:
        print(e)
